{
  "openapi": "3.0.3",
  "info": {
    "title": "UeventUplanner API",
    "version": "v2023.12.21",
    "description": "Documentation for the API"
  },
  "paths": {
    "/docs/schema/": {
      "get": {
        "operationId": "docs_schema_retrieve",
        "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "yaml"
              ]
            }
          },
          {
            "in": "query",
            "name": "lang",
            "schema": {
              "type": "string",
              "enum": [
                "af",
                "ar",
                "ar-dz",
                "ast",
                "az",
                "be",
                "bg",
                "bn",
                "br",
                "bs",
                "ca",
                "ckb",
                "cs",
                "cy",
                "da",
                "de",
                "dsb",
                "el",
                "en",
                "en-au",
                "en-gb",
                "eo",
                "es",
                "es-ar",
                "es-co",
                "es-mx",
                "es-ni",
                "es-ve",
                "et",
                "eu",
                "fa",
                "fi",
                "fr",
                "fy",
                "ga",
                "gd",
                "gl",
                "he",
                "hi",
                "hr",
                "hsb",
                "hu",
                "hy",
                "ia",
                "id",
                "ig",
                "io",
                "is",
                "it",
                "ja",
                "ka",
                "kab",
                "kk",
                "km",
                "kn",
                "ko",
                "ky",
                "lb",
                "lt",
                "lv",
                "mk",
                "ml",
                "mn",
                "mr",
                "ms",
                "my",
                "nb",
                "ne",
                "nl",
                "nn",
                "os",
                "pa",
                "pl",
                "pt",
                "pt-br",
                "ro",
                "ru",
                "sk",
                "sl",
                "sq",
                "sr",
                "sr-latn",
                "sv",
                "sw",
                "ta",
                "te",
                "tg",
                "th",
                "tk",
                "tr",
                "tt",
                "udm",
                "ug",
                "uk",
                "ur",
                "uz",
                "vi",
                "zh-hans",
                "zh-hant"
              ]
            }
          }
        ],
        "tags": [
          "docs"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.oai.openapi": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              },
              "application/yaml": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              },
              "application/vnd.oai.openapi+json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/auth/email/resend/": {
      "post": {
        "operationId": "auth_email_resend_create",
        "description": "A view for resending email verification.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendEmailVerification"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ResendEmailVerification"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ResendEmailVerification"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          },
          {}
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResendEmailVerification"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/auth/email/verify/": {
      "post": {
        "operationId": "auth_email_verify_create",
        "description": "Upon success full verification, return jwt",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmail"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmail"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmail"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWT"
                },
                "examples": {
                  "SuccessfulVerification": {
                    "value": {
                      "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "refresh": "",
                      "user": {
                        "id": 3,
                        "email": "user3@example.com",
                        "first_name": "John",
                        "last_name": "String",
                        "is_active": true,
                        "last_login": "2023-06-01T12:16:51.140608Z",
                        "date_joined": "2023-06-01T12:16:14.479286Z"
                      },
                      "access_expiration": "2023-12-25T13:14:51.299103Z",
                      "refresh_expiration": "2023-12-27T13:14:51.299105Z"
                    },
                    "summary": "Successful verification"
                  },
                  "Failed": {
                    "value": {
                      "detail": "not found."
                    }
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/auth/google/code/": {
      "post": {
        "operationId": "auth_google_code_create",
        "description": "Authorization code flow for Google login.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomSocialLogin"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CustomSocialLogin"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CustomSocialLogin"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomSocialLogin"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/auth/logout/": {
      "get": {
        "operationId": "auth_logout_retrieve",
        "description": "Calls Django logout method and delete the Token object\nassigned to the current User object.\n\nAccepts/Returns nothing.",
        "tags": [
          "auth"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      },
      "post": {
        "operationId": "auth_logout_create",
        "description": "Calls Django logout method and delete the Token object\nassigned to the current User object.\n\nAccepts/Returns nothing.",
        "tags": [
          "auth"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/auth/password/change/": {
      "post": {
        "operationId": "auth_password_change_create",
        "description": "Calls Django Auth SetPasswordForm save method.\n\nAccepts the following POST parameters: new_password1, new_password2\nReturns the success/fail message.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChange"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChange"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChange"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordChange"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/auth/password/reset/": {
      "post": {
        "operationId": "auth_password_reset_create",
        "description": "Calls Django Auth PasswordResetForm save method.\n\nAccepts the following POST parameters: email\nReturns the success/fail message.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordReset"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PasswordReset"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PasswordReset"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordReset"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/auth/password/reset/confirm/": {
      "post": {
        "operationId": "auth_password_reset_confirm_create",
        "description": "Password reset e-mail link is confirmed, therefore\nthis resets the user's password.\n\nAccepts the following POST parameters: token, uid,\n    new_password1, new_password2\nReturns the success/fail message.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetConfirm"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetConfirm"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetConfirm"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetConfirm"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/auth/social_accounts/": {
      "get": {
        "operationId": "auth_social_accounts_list",
        "description": "List SocialAccounts for the currently logged in user",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": [
          "auth"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSocialAccountList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/auth/social_accounts/{id}/disconnect/": {
      "post": {
        "operationId": "auth_social_accounts_disconnect_create",
        "description": "Disconnect SocialAccount from remote service for\nthe currently logged in user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialConnect"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SocialConnect"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SocialConnect"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialConnect"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/auth/token/": {
      "post": {
        "operationId": "auth_token_create",
        "description": "Retrieve token for user.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWTSerializerWithExpiration"
                },
                "examples": {
                  "SuccessfulAuthentication": {
                    "value": {
                      "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "user": {
                        "id": 13,
                        "email": "user@example.com",
                        "first_name": "user",
                        "last_name": "user",
                        "is_active": true,
                        "last_login": "2023-12-18T13:14:51.267172Z",
                        "date_joined": "2023-12-18T12:55:02.939768Z"
                      },
                      "access_expiration": "2023-12-25T13:14:51.299103Z",
                      "refresh_expiration": "2023-12-27T13:14:51.299105Z"
                    },
                    "summary": "Successful Authentication"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/auth/token/refresh/": {
      "post": {
        "operationId": "auth_token_refresh_create",
        "description": "Takes a refresh type JSON web token and returns an access type JSON web\ntoken if the refresh token is valid.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefresh"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefresh"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefresh"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenRefresh"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/auth/token/verify/": {
      "post": {
        "operationId": "auth_token_verify_create",
        "description": "Takes a token and indicates if it is valid.  This view provides no\ninformation about a token's fitness for a particular use.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenVerify"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenVerify"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/TokenVerify"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenVerify"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/auth/user/": {
      "get": {
        "operationId": "auth_user_retrieve",
        "description": "Reads and updates UserModel fields\nAccepts GET, PUT, PATCH methods.\n\nDefault accepted fields: username, first_name, last_name\nDefault display fields: pk, username, email, first_name, last_name\nRead-only fields: pk, email\n\nReturns UserModel fields.",
        "tags": [
          "auth"
        ],
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetails"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "auth_user_update",
        "description": "Reads and updates UserModel fields\nAccepts GET, PUT, PATCH methods.\n\nDefault accepted fields: username, first_name, last_name\nDefault display fields: pk, username, email, first_name, last_name\nRead-only fields: pk, email\n\nReturns UserModel fields.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDetails"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserDetails"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserDetails"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetails"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "auth_user_partial_update",
        "description": "Reads and updates UserModel fields\nAccepts GET, PUT, PATCH methods.\n\nDefault accepted fields: username, first_name, last_name\nDefault display fields: pk, username, email, first_name, last_name\nRead-only fields: pk, email\n\nReturns UserModel fields.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserDetails"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserDetails"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedUserDetails"
              }
            }
          }
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetails"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/registration/": {
      "post": {
        "operationId": "registration_create",
        "tags": [
          "registration"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registration"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Registration"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Registration"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "jwtHeaderAuth": []
          },
          {
            "jwtCookieAuth": []
          },
          {}
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration"
                }
              }
            },
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CustomSocialLogin": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "JWT": {
        "type": "object",
        "description": "A serializer for the JWT token.",
        "properties": {
          "access": {
            "type": "string"
          },
          "refresh": {
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetails"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "access",
          "refresh",
          "user"
        ]
      },
      "JWTSerializerWithExpiration": {
        "type": "object",
        "description": "Serializer for JWT authentication with expiration times.",
        "properties": {
          "access": {
            "type": "string"
          },
          "refresh": {
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetails"
              }
            ],
            "readOnly": true
          },
          "access_expiration": {
            "type": "string",
            "format": "date-time"
          },
          "refresh_expiration": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "access",
          "access_expiration",
          "refresh",
          "refresh_expiration",
          "user"
        ]
      },
      "Login": {
        "type": "object",
        "description": "A serializer for the login.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "PaginatedSocialAccountList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=4"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?page=2"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialAccount"
            }
          }
        }
      },
      "PasswordChange": {
        "type": "object",
        "properties": {
          "new_password1": {
            "type": "string",
            "maxLength": 128
          },
          "new_password2": {
            "type": "string",
            "maxLength": 128
          }
        },
        "required": [
          "new_password1",
          "new_password2"
        ]
      },
      "PasswordReset": {
        "type": "object",
        "description": "A serializer for the password reset.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "email"
        ]
      },
      "PasswordResetConfirm": {
        "type": "object",
        "description": "Serializer for confirming a password reset attempt.",
        "properties": {
          "new_password1": {
            "type": "string",
            "maxLength": 128
          },
          "new_password2": {
            "type": "string",
            "maxLength": 128
          },
          "uid": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "new_password1",
          "new_password2",
          "token",
          "uid"
        ]
      },
      "PatchedUserDetails": {
        "type": "object",
        "description": "A serializer for the user details.",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true,
            "title": "ID"
          },
          "email": {
            "type": "string",
            "format": "email",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          }
        }
      },
      "ProviderEnum": {
        "enum": [
          "facebook",
          "twitter",
          "google",
          "github"
        ],
        "type": "string",
        "description": "* `facebook` - Facebook\n* `twitter` - Twitter\n* `google` - Google\n* `github` - GitHub"
      },
      "Registration": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name"
        ]
      },
      "ResendEmailVerification": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "email"
        ]
      },
      "SocialAccount": {
        "type": "object",
        "description": "serialize allauth SocialAccounts for use with a REST API",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "provider": {
            "$ref": "#/components/schemas/ProviderEnum"
          },
          "uid": {
            "type": "string",
            "maxLength": 191
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "date_joined": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "date_joined",
          "id",
          "last_login",
          "provider",
          "uid"
        ]
      },
      "SocialConnect": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      },
      "TokenRefresh": {
        "type": "object",
        "properties": {
          "access": {
            "type": "string",
            "readOnly": true
          },
          "refresh": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "access",
          "refresh"
        ]
      },
      "TokenVerify": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "token"
        ]
      },
      "UserDetails": {
        "type": "object",
        "description": "A serializer for the user details.",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true,
            "title": "ID"
          },
          "email": {
            "type": "string",
            "format": "email",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          }
        },
        "required": [
          "email",
          "pk"
        ]
      },
      "VerifyEmail": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "key"
        ]
      }
    },
    "securitySchemes": {
      "jwtCookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "event-planner-jwt"
      },
      "jwtHeaderAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Local development server"
    }
  ]
}
